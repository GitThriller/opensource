IF OBJECT_ID('DBO.EXE_COMPARE_TABLES','P') IS NOT NULL
	DROP PROCEDURE DBO.EXE_COMPARE_TABLES
GO
	
CREATE PROC DBO.EXE_COMPARE_TABLES
(	@TABLE_SCHEMA_1 NVARCHAR(MAX)
	,@TABLE_NAME_1 NVARCHAR(MAX)
	,@TABLE_SCHEMA_2 NVARCHAR(MAX)
	,@TABLE_NAME_2 NVARCHAR(MAX)
	,@COMPARISON_THRESHOLD FLOAT = 0.01)
AS
----------------------------------------------------------------
----------------------------------------------------------------
/*
Script Purpose:


*/
----------------------------------------------------------------
----------------------------------------------------------------
SET NOCOUNT ON

DECLARE @SQL NVARCHAR(MAX)

DECLARE @SQL_TO_OUTPUT NVARCHAR(MAX)

DECLARE @RESULT NVARCHAR(MAX)='Success'
DECLARE @MESSAGE NVARCHAR(MAX)=''

DECLARE @ROWCOUNT_TABLE_1 INT
DECLARE @ROWCOUNT_TABLE_2 INT

DECLARE @COL_LOOP_ID INT
DECLARE @COL_LOOP_ID_MAX INT
DECLARE @COL_LIST NVARCHAR(max)
DECLARE @COL_LIST_CONVERTED NVARCHAR(max)
DECLARE @COL_LIST_COMPARISON NVARCHAR(max)
DECLARE @COL_LIST_ORDERING NVARCHAR(max)
DECLARE @SQL_EXPECTED NVARCHAR(max)
DECLARE @SQL_ACTUAL NVARCHAR(max)
DECLARE @COLUMN_NAME NVARCHAR(max)
DECLARE @COLUMN_DATA_TYPE NVARCHAR(max)
DECLARE @COLUMN_LENGTH NVARCHAR(max)

DECLARE @NUMBER_ERROR_ROWS INT


--CHECK IF ROWCOUNTS BETWEEN 2 TABLES THE SAME (run this now so if tables dont exist it errors, only show results a bit later)
		SET @SQL=N'SELECT @ROWCOUNT_TABLE_1=COUNT(*) 
					FROM ['+@TABLE_SCHEMA_1+'].['+@TABLE_NAME_1+']'
		EXEC SP_EXECUTESQL @SQL,N'@ROWCOUNT_TABLE_1 INT OUTPUT',@ROWCOUNT_TABLE_1=@ROWCOUNT_TABLE_1 OUTPUT
	

		SET @SQL=N'SELECT @ROWCOUNT_TABLE_2=COUNT(*) 
					FROM ['+@TABLE_SCHEMA_2+'].['+@TABLE_NAME_2+']'
		EXEC SP_EXECUTESQL @SQL,N'@ROWCOUNT_TABLE_2 INT OUTPUT',@ROWCOUNT_TABLE_2=@ROWCOUNT_TABLE_2 OUTPUT

--CHECK IF ALL COLUMNS MATCH BETWEEN TABLES
IF OBJECT_ID('tempdb..#COLS_TABLE_1','U') IS NOT NULL
		DROP TABLE #COLS_TABLE_1
	
	CREATE TABLE #COLS_TABLE_1
	(
		DTT_ID INT IDENTITY
		,COL_NAME NVARCHAR(255)
		,DATA_TYPE NVARCHAR(255)
		,DATA_TYPE_BUCKET NVARCHAR(255)
		,[LENGTH] INT
	)

	SET @SQL=N'INSERT INTO #COLS_TABLE_1
	(
		COL_NAME
		,DATA_TYPE
		,DATA_TYPE_BUCKET
		,[LENGTH]
	)
	SELECT C.COLUMN_NAME 
			,C.DATA_TYPE
			,case when C.DATA_TYPE in (''money''
										,''int''
										,''decimal''
										,''smallint''
										,''numeric''
										,''tinyint''
										,''float''
										,''bigint'') then ''Numeric''
				when C.DATA_TYPE in (''datetime2''
										,''datetime''
										,''date'') then ''Date''
				when C.DATA_TYPE in (''varchar''
										,''CHAR''
										,''nvarchar'') then ''Char''
				else C.DATA_TYPE
				end
			,C.CHARACTER_MAXIMUM_LENGTH
	FROM INFORMATION_SCHEMA.COLUMNS AS C
	WHERE C.TABLE_SCHEMA=N'''+@TABLE_SCHEMA_1+'''
			AND C.TABLE_NAME=N'''+@TABLE_NAME_1+'''
			AND C.COLUMN_NAME NOT LIKE ''%DTT%''
	ORDER BY CASE WHEN C.DATA_TYPE IN (''money''
										,''decimal''
										,''numeric''
										,''float'') THEN 1 ELSE 0 END' --note dtt_id cols not included

	EXEC SP_EXECUTESQL @SQL
		


	IF OBJECT_ID('tempdb..#COLS_TABLE_2','U') IS NOT NULL
		DROP TABLE #COLS_TABLE_2
	
	CREATE TABLE #COLS_TABLE_2
	(
		DTT_ID INT IDENTITY
		,COL_NAME NVARCHAR(255)
		,DATA_TYPE NVARCHAR(255)
		,DATA_TYPE_BUCKET NVARCHAR(255)
		,[LENGTH] INT
	)

	SET @SQL=N'INSERT INTO #COLS_TABLE_2
	(
		COL_NAME
		,DATA_TYPE
		,DATA_TYPE_BUCKET
		,[LENGTH]
	)
	SELECT C.COLUMN_NAME 
			,C.DATA_TYPE
			,case when C.DATA_TYPE in (''money''
										,''int''
										,''decimal''
										,''smallint''
										,''numeric''
										,''tinyint''
										,''float''
										,''bigint'') then ''Numeric''
				when C.DATA_TYPE in (''datetime2''
										,''datetime''
										,''date'') then ''Date''
				when C.DATA_TYPE in (''varchar''
										,''CHAR''
										,''nvarchar'') then ''Char''
				else C.DATA_TYPE
				end
			,C.CHARACTER_MAXIMUM_LENGTH
	FROM INFORMATION_SCHEMA.COLUMNS AS C
	WHERE C.TABLE_SCHEMA=N'''+@TABLE_SCHEMA_2+'''
			AND C.TABLE_NAME=N'''+@TABLE_NAME_2+'''
			AND C.COLUMN_NAME NOT LIKE ''%DTT%''
	ORDER BY CASE WHEN C.DATA_TYPE IN (''money''
										,''decimal''
										,''numeric''
										,''float'') THEN 1 ELSE 0 END' --note dtt_id cols not included

	EXEC SP_EXECUTESQL @SQL

	IF EXISTS (SELECT 1 FROM #COLS_TABLE_1 AS CE FULL OUTER JOIN #COLS_TABLE_2 AS CA
							ON CA.COL_NAME = CE.COL_NAME
								AND CA.DATA_TYPE_BUCKET = CE.DATA_TYPE_BUCKET
							WHERE CA.COL_NAME IS NULL
								OR CE.COL_NAME IS NULL)
	BEGIN
		SET @RESULT='Failure'
		SET @MESSAGE=N'Columns specified for each table are not the same (note that data types for columns also must broadly match, see code for buckets). Ensure you are comparing tables with the same columns.'
	END
	
	

	--CONTINUE TO NEXT CHECK IF COLUMNS MATCH
	IF @RESULT='Success'
	BEGIN
	
		IF @ROWCOUNT_TABLE_1=@ROWCOUNT_TABLE_2
		BEGIN
			SET @RESULT='Success'
		END

		ELSE
		BEGIN
			SET @RESULT='Failure'
			SET @MESSAGE=N'Rowcounts for tables ['+@TABLE_SCHEMA_1+'].['+@TABLE_NAME_1+
						'] and ['+@TABLE_SCHEMA_2+'].['+@TABLE_NAME_2+'] do not match. ['+@TABLE_SCHEMA_1+'].['+@TABLE_NAME_1+'] rowcount is '
								+CAST(@ROWCOUNT_TABLE_1 AS NVARCHAR(255))
							+' while ['+@TABLE_SCHEMA_2+'].['+@TABLE_NAME_2+'] rowcount is '+CAST(@ROWCOUNT_TABLE_2 AS NVARCHAR(255))
		END

	END

	--CONTINUE TO NEXT CHECK IF ROWCOUNTS MATCH
	IF @RESULT='Success'
	BEGIN
		--CHECK RESULTS IN TABLE MATCH EXACTLY


		--DROP TEMP TABLES
		IF OBJECT_ID('dbo.TABLE_1_RESULTS','U') IS NOT NULL
			DROP TABLE dbo.TABLE_1_RESULTS

		IF OBJECT_ID('dbo.TABLE_2_RESULTS','U') IS NOT NULL
			DROP TABLE dbo.TABLE_2_RESULTS


		--LOOP THROUGH EACH COLUMN IN TABLE TO GENERATE CODE
		SELECT @COL_LOOP_ID=MIN(CA.DTT_ID), @COL_LOOP_ID_MAX=MAX(CA.DTT_ID) 
		FROM #COLS_TABLE_1 AS CA

		SET @SQL=''
		SET @COL_LIST=''
		SET @COL_LIST_CONVERTED=''
		SET @COL_LIST_COMPARISON=''
		SET @COL_LIST_ORDERING=''
		SET @SQL_EXPECTED=N'CREATE TABLE dbo.TABLE_1_RESULTS (DTT_COMPARE_ID INT,'+CHAR(10)
		SET @SQL_ACTUAL=N'CREATE TABLE dbo.TABLE_2_RESULTS (DTT_COMPARE_ID INT,'+CHAR(10)

		WHILE @COL_LOOP_ID<=@COL_LOOP_ID_MAX
		BEGIN

			SELECT @COLUMN_NAME='['+CA.COL_NAME+']'
					,@COLUMN_DATA_TYPE=CA.DATA_TYPE
					,@COLUMN_LENGTH=CA.LENGTH
			FROM #COLS_TABLE_1 AS CA
			WHERE CA.DTT_ID=@COL_LOOP_ID

			SET @SQL=@SQL+@COLUMN_NAME+' '+@COLUMN_DATA_TYPE+ISNULL(N'('+CASE WHEN @COLUMN_LENGTH=-1 THEN 'MAX'
																				ELSE CAST(@COLUMN_LENGTH AS NVARCHAR(255)) END+')','')+','+CHAR(10) --ADD A LINE TO CODE FOR EACH COLUMN TO BE CREATED

			SET @COL_LIST=@COL_LIST+@COLUMN_NAME+','+CHAR(10)
			SET @COL_LIST_ORDERING=@COL_LIST_ORDERING+CASE WHEN @COLUMN_DATA_TYPE IN ('float','money','decimal','numeric')
																	THEN 'CAST('+@COLUMN_NAME+' AS MONEY),'ELSE 'CAST('+@COLUMN_NAME+' AS '+@COLUMN_DATA_TYPE+' '+ISNULL('('+CASE WHEN @COLUMN_LENGTH=-1 THEN 'MAX'
																				ELSE CAST(@COLUMN_LENGTH AS NVARCHAR(255)) END+')','')+'),'
																				END+CHAR(10)
			SET @COL_LIST_CONVERTED=@COL_LIST_CONVERTED+'CAST('+@COLUMN_NAME+' AS '+@COLUMN_DATA_TYPE+' '+ISNULL('('+CASE WHEN @COLUMN_LENGTH=-1 THEN 'MAX'
																				ELSE CAST(@COLUMN_LENGTH AS NVARCHAR(255)) END+')','')+'),'+CHAR(10)
			SET @COL_LIST_COMPARISON=@COL_LIST_COMPARISON+
								CASE WHEN @COLUMN_DATA_TYPE IN ('float','money','decimal','numeric')
									THEN 'abs(isnull(exp.'+@COLUMN_NAME+',0)-isnull(act.'+@COLUMN_NAME+',0))>'+CAST(@COMPARISON_THRESHOLD AS NVARCHAR(255))
									ELSE 'REPLACE(REPLACE(isnull(exp.'+@COLUMN_NAME+',''''),CHAR(10),'' ''),CHAR(13),'' '')<>REPLACE(REPLACE(isnull(ACT.'+@COLUMN_NAME+',''''),CHAR(10),'' ''),CHAR(13),'' '')' --Remove special characters char(10) and char(13) since these may cause discrepancy
									END +' or'+CHAR(10)


		SET @COL_LOOP_ID=@COL_LOOP_ID+1
		END

		SET @SQL=@SQL+')'
		SET @COL_LIST=LEFT(@COL_LIST,LEN(@COL_LIST)-2) --REMOVE THE FINAL COMMA AND CHAR(10) FROM THE COLUMN LIST
		SET @COL_LIST_ORDERING=LEFT(@COL_LIST_ORDERING,LEN(@COL_LIST_ORDERING)-2) --REMOVE THE FINAL COMMA AND CHAR(10) FROM THE COLUMN LIST
		SET @COL_LIST_CONVERTED=LEFT(@COL_LIST_CONVERTED,LEN(@COL_LIST_CONVERTED)-2) --REMOVE THE FINAL COMMA AND CHAR(10) FROM THE COLUMN LIST
		SET @COL_LIST_COMPARISON=LEFT(@COL_LIST_COMPARISON,LEN(@COL_LIST_COMPARISON)-3) --REMOVE FINAL 0R AND CHAR(10) 


		--APPEND INITIAL SQL STRINGS TO GET FULL CREATE STATEMENTS
		SET @SQL_EXPECTED=@SQL_EXPECTED+@SQL
		SET @SQL_ACTUAL=@SQL_ACTUAL+@SQL

		SET @SQL_TO_OUTPUT=@SQL_EXPECTED+CHAR(10)+CHAR(10)+@SQL_ACTUAL

		PRINT @SQL_EXPECTED
		EXEC SP_EXECUTESQL @SQL_EXPECTED

		PRINT @SQL_ACTUAL
		EXEC SP_EXECUTESQL @SQL_ACTUAL

		--INSERT DATA INTO THESE TABLES
		SET @SQL=N'INSERT INTO dbo.TABLE_1_RESULTS (DTT_COMPARE_ID,'+CHAR(10)+ 
												@COL_LIST+')'+CHAR(10)+
					'SELECT ROW_NUMBER() OVER (ORDER BY '+@COL_LIST_ORDERING+'),'+CHAR(10)
												+@COL_LIST_CONVERTED+'
					FROM ['+@TABLE_SCHEMA_1+'].['+@TABLE_NAME_1+']'

		SET @SQL_TO_OUTPUT=@SQL_TO_OUTPUT+CHAR(10)+CHAR(10)+@SQL
		
		PRINT @SQL
		EXEC SP_EXECUTESQL @SQL

		SET @SQL=N'INSERT INTO dbo.TABLE_2_RESULTS (DTT_COMPARE_ID,'+CHAR(10)+ 
												@COL_LIST+')'+CHAR(10)+
					'SELECT ROW_NUMBER() OVER (ORDER BY '+@COL_LIST_ORDERING+'),'+CHAR(10)
												+@COL_LIST_CONVERTED+'
					FROM ['+@TABLE_SCHEMA_2+'].['+@TABLE_NAME_2+']'

		SET @SQL_TO_OUTPUT=@SQL_TO_OUTPUT+CHAR(10)+CHAR(10)+@SQL
		
		PRINT @SQL
		EXEC SP_EXECUTESQL @SQL

		--COMPARE DATA IN TABLES
		SET @SQL=N'SELECT @NUMBER_ERROR_ROWS=count(*) FROM dbo.TABLE_1_RESULTS EXP
					INNER JOIN dbo.TABLE_2_RESULTS ACT
						ON EXP.DTT_COMPARE_ID=ACT.DTT_COMPARE_ID
					WHERE '+@COL_LIST_COMPARISON

		DECLARE @SQL_TO_RUN NVARCHAR(MAX) --Slightly different to @sql in this case to allow user to easily debug
		SET @SQL_TO_RUN=N'SELECT * FROM dbo.TABLE_1_RESULTS EXP
					INNER JOIN dbo.TABLE_2_RESULTS ACT
						ON EXP.DTT_COMPARE_ID=ACT.DTT_COMPARE_ID
					WHERE '+@COL_LIST_COMPARISON

		SET @SQL_TO_OUTPUT=@SQL_TO_OUTPUT+CHAR(10)+CHAR(10)+@SQL_TO_RUN		
		
		PRINT @SQL_TO_RUN
		EXEC SP_EXECUTESQL @SQL,N'@NUMBER_ERROR_ROWS INT OUTPUT',@NUMBER_ERROR_ROWS=@NUMBER_ERROR_ROWS OUTPUT

		IF @NUMBER_ERROR_ROWS>0
		BEGIN
			SET @RESULT='Failure'
			SET @MESSAGE=N'Rowcounts and column definitions match but values in columns do not match between tables. Copy code from messages to assist in investigation.'
		END


	END

	--DROP INTERMEDIATE TABLES USED
IF OBJECT_ID('dbo.TABLE_1_RESULTS','U') IS NOT NULL
			DROP TABLE dbo.TABLE_1_RESULTS

IF OBJECT_ID('dbo.TABLE_2_RESULTS','U') IS NOT NULL
	DROP TABLE dbo.TABLE_2_RESULTS

IF @RESULT='Success'
BEGIN

	SET @MESSAGE='Values in tables exactly match (note that columns containing DTT are not compared).'

END

SELECT @RESULT AS Result, @MESSAGE AS Message

SELECT @SQL_TO_OUTPUT AS [Debugging Code]
