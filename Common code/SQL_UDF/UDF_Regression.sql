
IF OBJECT_ID('UDF_Regression') IS NOT NULL
BEGIN
Drop FUNCTION UDF_Regression
END


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION UDF_Regression(@INPUT REGRESSION_TABLE READONLY,@ALPHA FLOAT,@ZERO_INTERCEPT CHAR(1))
RETURNS @OUTPUT TABLE
(
	GROUP_ID INT
	,ELEMENT_ID INT
	,INTERNAL_OUTLIER CHAR(1) DEFAULT 'N'
	,X_VALUE FLOAT
	,Y_VALUE FLOAT
	,EXPECTED_Y AS(INTERCEPT+GRADIENT*X_VALUE)
	,GRADIENT FLOAT
	,INTERCEPT FLOAT
	,R2 FLOAT CHECK(R2 BETWEEN 0 AND 1)
	,SD FLOAT
	,NUM_OUTLIERS_REMOVED FLOAT DEFAULT 0
	UNIQUE(ELEMENT_ID)
)
AS
/*
Runs Y=a+bX regression with outlier removal capacity.
Created by Bryan Ye 120927
*/
BEGIN
	IF @ZERO_INTERCEPT = 'Y'
	
	BEGIN
		;WITH means AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,AVG(X_VALUE) OVER(PARTITION BY GROUP_ID) MX
				,AVG(Y_VALUE) OVER(PARTITION BY GROUP_ID) MY
				,CAST(COUNT(*) OVER(PARTITION BY GROUP_ID) AS FLOAT) N
			FROM @INPUT
		)
		,gradient_intercept AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,MX
				,MY
				,N
				,0 INTERCEPT
				,CASE WHEN SUM(SQUARE(X_VALUE)) OVER(PARTITION BY GROUP_ID) = 0 THEN 0
					ELSE SUM(X_VALUE*Y_VALUE) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(X_VALUE)) OVER(PARTITION BY GROUP_ID)
					END GRADIENT
			FROM means
		)
		,r2_calc AS
		(
			SELECT GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,GRADIENT
				,INTERCEPT
				,CASE WHEN SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID) = 0 THEN NULL
					ELSE 1-SUM(SQUARE(Y_VALUE - GRADIENT*X_VALUE)) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)
					END R2_RES
				,CASE WHEN SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID) = 0 THEN NULL
					ELSE SUM(SQUARE(GRADIENT*X_VALUE-MY)) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)
					END R2_MOD
				,CASE WHEN SUM(SQUARE(Y_VALUE)) OVER(PARTITION BY GROUP_ID) = 0 THEN NULL
					ELSE SUM(SQUARE(GRADIENT*X_VALUE)) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(Y_VALUE)) OVER(PARTITION BY GROUP_ID)
					END R2_DECENTRALISED
				,SQRT(SUM(SQUARE(Y_VALUE - GRADIENT*X_VALUE)/(N-1)) OVER(PARTITION BY GROUP_ID)) SD
			FROM gradient_intercept
		)
		INSERT INTO @OUTPUT
		(
			GROUP_ID
			,ELEMENT_ID
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,INTERCEPT
			,R2
			,SD
		)
		SELECT GROUP_ID
			,ELEMENT_ID
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,INTERCEPT
			,CASE WHEN R2_RES BETWEEN 0 AND 1 THEN R2_RES
				WHEN R2_MOD BETWEEN 0 AND 1 THEN R2_MOD
				ELSE R2_DECENTRALISED END R2
			,SD
		FROM r2_calc
	END
	
	ELSE IF @ALPHA IN (0.1,0.05,0.02,0.01) --acceptable alpha values to apply outlier removal algorithm

	BEGIN
		;WITH means AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,AVG(X_VALUE) OVER(PARTITION BY GROUP_ID) MX
				,AVG(Y_VALUE) OVER(PARTITION BY GROUP_ID) MY
				,CAST(COUNT(*) OVER(PARTITION BY GROUP_ID) AS FLOAT) N_OLD
				,SUM(X_VALUE) OVER(PARTITION BY GROUP_ID) SX
				,SUM(SQUARE(X_VALUE)) OVER(PARTITION BY GROUP_ID) SSX
			FROM @INPUT
		)
		,calc_gradient AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,MX
				,MY
				,N_OLD
				,SX
				,SSX
				,CASE WHEN SUM(SQUARE(X_VALUE-MX)) OVER(PARTITION BY GROUP_ID) = 0 THEN 0
					ELSE SUM((X_VALUE-MX)*(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(X_VALUE-MX)) OVER(PARTITION BY GROUP_ID)
					END GRADIENT
			FROM means
		)
		,complete_model AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,MX
				,MY
				,N_OLD
				,SX
				,SSX
				,GRADIENT
				,MY-GRADIENT*MX INTERCEPT
				,Y_VALUE - (MY-GRADIENT*MX) - GRADIENT*X_VALUE VARIATION
				,SUM(SQUARE(Y_VALUE - (MY-GRADIENT*MX) - GRADIENT*X_VALUE)) OVER(PARTITION BY GROUP_ID) SSE
				,CASE WHEN N_OLD*SSX-SQUARE(SX) = 0 THEN 0 ELSE (N_OLD*SQUARE(X_VALUE)-2.0*X_VALUE*SX+SSX)/(N_OLD*SSX-SQUARE(SX)) END H_II
			FROM calc_gradient
		)
		,identify_outliers AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,MX
				,MY
				,N_OLD
				,SX
				,SSX
				,GRADIENT
				,INTERCEPT
				,VARIATION
				,SSE
				,H_II
				,VARIATION/SQRT((SSE-SQUARE(VARIATION))/(N_OLD-3.0))/SQRT(1-H_II) STUDENTISED_RESIDUAL
				,(SELECT T_ALPHA FROM DT_Custom_SYD.dbo.REF_T_ALPHA WHERE DF = N_OLD-3 AND ALPHA = @ALPHA) T_ALPHA
				,CASE WHEN ABS(VARIATION/SQRT((SSE-SQUARE(VARIATION))/(N_OLD-3.0))/SQRT(1-H_II)) > (SELECT T_ALPHA FROM DT_Custom_SYD.dbo.REF_T_ALPHA WHERE DF = N_OLD-3 AND ALPHA = @ALPHA)
						OR H_II > 4.0/N_OLD THEN 1 ELSE 0 END OUTLIER
			FROM complete_model
		)
		,recalc_mean AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,AVG(X_VALUE) OVER(PARTITION BY GROUP_ID) MX
				,AVG(Y_VALUE) OVER(PARTITION BY GROUP_ID) MY
				,COUNT(*) OVER(PARTITION BY GROUP_ID) N
				,N_OLD
			FROM identify_outliers
			WHERE OUTLIER = 0
		)
		,recalc_gradient AS
		(
			SELECT GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,MX
				,MY
				,N
				,N_OLD
				,CASE WHEN SUM(SQUARE(X_VALUE-MX)) OVER(PARTITION BY GROUP_ID) = 0 THEN 0
					ELSE SUM((X_VALUE-MX)*(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(X_VALUE-MX)) OVER(PARTITION BY GROUP_ID)
					END GRADIENT
			FROM recalc_mean
		)
		,included_elements AS
		(
			SELECT GROUP_ID
				,ELEMENT_ID
				,'N' INTERNAL_OUTLIER
				,X_VALUE
				,Y_VALUE
				,GRADIENT
				,MY - GRADIENT*MX INTERCEPT
				,CASE WHEN SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID) = 0 THEN NULL
					ELSE SUM(SQUARE(GRADIENT*(X_VALUE - MX))) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)
					END R2
				,SQRT(SUM(SQUARE(Y_VALUE - (MY - GRADIENT*MX) - GRADIENT*X_VALUE)/(N-1)) OVER(PARTITION BY GROUP_ID)) SD
				,N_OLD-N NUM_OUTLIERS_REMOVED
			FROM recalc_gradient
		)
		,excluded_elements AS
		(
			SELECT a.GROUP_ID
				,ELEMENT_ID
				,'Y' INTERNAL_OUTLIER
				,X_VALUE
				,Y_VALUE
				,GRADIENT
				,INTERCEPT
				,R2
				,SD
				,NUM_OUTLIERS_REMOVED
			FROM (SELECT GROUP_ID,ELEMENT_ID,X_VALUE,Y_VALUE FROM identify_outliers WHERE OUTLIER = 1) a
			LEFT JOIN (SELECT DISTINCT GROUP_ID,GRADIENT,INTERCEPT,R2,SD,NUM_OUTLIERS_REMOVED FROM included_elements) b
				ON a.GROUP_ID = b.GROUP_ID
		)
		INSERT INTO @OUTPUT
		(
			GROUP_ID
			,ELEMENT_ID
			,INTERNAL_OUTLIER
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,INTERCEPT
			,R2
			,SD
			,NUM_OUTLIERS_REMOVED
		)
		SELECT GROUP_ID
			,ELEMENT_ID
			,INTERNAL_OUTLIER
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,INTERCEPT
			,R2
			,SD
			,NUM_OUTLIERS_REMOVED
		FROM included_elements
		UNION ALL
		SELECT GROUP_ID
			,ELEMENT_ID
			,INTERNAL_OUTLIER
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,INTERCEPT
			,R2
			,SD
			,NUM_OUTLIERS_REMOVED
		FROM excluded_elements
	END

	ELSE --non accepted alpha values, outlier removal will not be applied
	
	BEGIN
		;WITH means AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,AVG(X_VALUE) OVER(PARTITION BY GROUP_ID) MX
				,AVG(Y_VALUE) OVER(PARTITION BY GROUP_ID) MY
				,CAST(COUNT(*) OVER(PARTITION BY GROUP_ID) AS FLOAT) N
			FROM @INPUT
		)
		,calc_gradient AS
		(
			SELECT
				GROUP_ID
				,ELEMENT_ID
				,X_VALUE
				,Y_VALUE
				,MX
				,MY
				,N
				,CASE WHEN SUM(SQUARE(X_VALUE-MX)) OVER(PARTITION BY GROUP_ID) = 0 THEN 0
					ELSE SUM((X_VALUE-MX)*(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(X_VALUE-MX)) OVER(PARTITION BY GROUP_ID)
					END GRADIENT
			FROM means
		)
		INSERT INTO @OUTPUT
		(
			GROUP_ID
			,ELEMENT_ID
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,INTERCEPT
			,R2
			,SD
		)
		SELECT GROUP_ID
			,ELEMENT_ID
			,X_VALUE
			,Y_VALUE
			,GRADIENT
			,MY - GRADIENT*MX INTERCEPT
			,CASE WHEN SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID) = 0 THEN NULL
				ELSE SUM(SQUARE(GRADIENT*(X_VALUE - MX))) OVER(PARTITION BY GROUP_ID)/SUM(SQUARE(Y_VALUE-MY)) OVER(PARTITION BY GROUP_ID)
				END R2
			,SQRT(SUM(SQUARE(Y_VALUE - (MY - GRADIENT*MX) - GRADIENT*X_VALUE)/(N-1)) OVER(PARTITION BY GROUP_ID)) SD
		FROM calc_gradient
	END

	RETURN
END
GO